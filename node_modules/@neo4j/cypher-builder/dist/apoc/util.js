"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePredicate = exports.validate = void 0;
const Literal_1 = require("../references/Literal");
const normalize_variable_1 = require("../utils/normalize-variable");
const CypherProcedure_1 = require("../procedures/CypherProcedure");
const CypherFunctions_1 = require("../expressions/functions/CypherFunctions");
/**
 * @group Expressions
 * @category Procedures
 */
function validate(predicate, message, params = new Literal_1.Literal([0])) {
    const messageVar = (0, normalize_variable_1.normalizeVariable)(message);
    return new CypherProcedure_1.VoidCypherProcedure("apoc.util.validate", [predicate, messageVar, params]);
}
exports.validate = validate;
/**
 * @group Expressions
 * @category Functions
 */
function validatePredicate(predicate, message) {
    const defaultParam = new Literal_1.Literal([0]);
    return new CypherFunctions_1.CypherFunction("apoc.util.validatePredicate", [predicate, new Literal_1.Literal(message), defaultParam]);
}
exports.validatePredicate = validatePredicate;
//# sourceMappingURL=util.js.map