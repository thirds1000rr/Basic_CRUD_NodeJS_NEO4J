import type { CypherEnvironment } from "../Environment";
import type { RelationshipRef } from "../references/RelationshipRef";
import { NodeRef } from "../references/NodeRef";
import { Pattern } from "./Pattern";
import { PatternElement } from "./PatternElement";
import type { Param } from "../references/Param";
type LengthOption = number | "*" | {
    min: number;
    max?: number;
} | {
    min?: number;
    max: number;
} | {
    min: number;
    max: number;
};
/** Partial pattern, cannot be used until connected to a node
 * @group Patterns
 */
export declare class PartialPattern extends PatternElement<RelationshipRef> {
    private length;
    private withType;
    private withVariable;
    private direction;
    private previous;
    private properties;
    constructor(rel: RelationshipRef, previous: Pattern);
    to(node?: NodeRef): Pattern;
    withoutType(): this;
    withoutVariable(): this;
    withDirection(direction: "left" | "right" | "undirected"): this;
    withProperties(properties: Record<string, Param>): this;
    withLength(option: LengthOption): this;
    /**
     * @hidden
     */
    getCypher(env: CypherEnvironment): string;
    private generateLengthStr;
    private getRelationshipTypesString;
}
export {};
//# sourceMappingURL=PartialPattern.d.ts.map