"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartialPattern = void 0;
const NodeRef_1 = require("../references/NodeRef");
const Pattern_1 = require("./Pattern");
const PatternElement_1 = require("./PatternElement");
/** Partial pattern, cannot be used until connected to a node
 * @group Patterns
 */
class PartialPattern extends PatternElement_1.PatternElement {
    constructor(rel, previous) {
        super(rel);
        this.withType = true;
        this.withVariable = true;
        this.direction = "right";
        this.previous = previous;
    }
    to(node) {
        if (!node)
            node = new NodeRef_1.NodeRef();
        return new Pattern_1.Pattern(node, this);
    }
    withoutType() {
        this.withType = false;
        return this;
    }
    withoutVariable() {
        this.withVariable = false;
        return this;
    }
    withDirection(direction) {
        this.direction = direction;
        return this;
    }
    withProperties(properties) {
        this.properties = properties;
        return this;
    }
    withLength(option) {
        this.length = option;
        return this;
    }
    /**
     * @hidden
     */
    getCypher(env) {
        const prevStr = this.previous.getCypher(env);
        const typeStr = this.withType ? this.getRelationshipTypesString(this.element) : "";
        const relStr = this.withVariable ? `${this.element.getCypher(env)}` : "";
        const propertiesStr = this.properties ? this.serializeParameters(this.properties || {}, env) : "";
        const lengthStr = this.generateLengthStr();
        const leftArrow = this.direction === "left" ? "<-" : "-";
        const rightArrow = this.direction === "right" ? "->" : "-";
        return `${prevStr}${leftArrow}[${relStr}${typeStr}${lengthStr}${propertiesStr}]${rightArrow}`;
    }
    generateLengthStr() {
        if (this.length === undefined)
            return "";
        if (typeof this.length === "number") {
            return `*${this.length}`;
        }
        else if (this.length === "*") {
            return "*";
        }
        else {
            return `*${this.length.min || ""}..${this.length.max || ""}`;
        }
    }
    getRelationshipTypesString(relationship) {
        const type = relationship.type; // TODO: escape label
        return relationship.type ? `:${type}` : "";
    }
}
exports.PartialPattern = PartialPattern;
//# sourceMappingURL=PartialPattern.js.map