"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.elementId = exports.id = exports.randomUUID = exports.labels = exports.pointDistance = exports.distance = exports.point = exports.coalesce = exports.CypherFunction = void 0;
const CypherASTNode_1 = require("../../CypherASTNode");
/** Represents a Cypher Function
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/)
 * @group Expressions
 * @category Cypher Functions
 */
class CypherFunction extends CypherASTNode_1.CypherASTNode {
    constructor(name, params = []) {
        super();
        this.name = name;
        this.params = params;
        for (const param of params) {
            if (param instanceof CypherASTNode_1.CypherASTNode) {
                this.addChildren(param);
            }
        }
    }
    /** @internal */
    getCypher(env) {
        const argsStr = this.serializeParams(env);
        return `${this.name}(${argsStr})`;
    }
    serializeParams(env) {
        return this.params.map((expr) => expr.getCypher(env)).join(", ");
    }
}
exports.CypherFunction = CypherFunction;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-coalesce)
 * @group Expressions
 * @category Cypher Functions
 */
function coalesce(expr, ...optionalExpr) {
    return new CypherFunction("coalesce", [expr, ...optionalExpr]);
}
exports.coalesce = coalesce;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/spatial/)
 * @group Expressions
 * @category Cypher Functions
 */
function point(variable) {
    return new CypherFunction("point", [variable]);
}
exports.point = point;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/4.3/functions/spatial/#functions-distance)
 * @group Expressions
 * @category Cypher Functions
 * @deprecated No longer supported in Neo4j 5. Use {@link pointDistance} instead.
 */
function distance(lexpr, rexpr) {
    return new CypherFunction("distance", [lexpr, rexpr]);
}
exports.distance = distance;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/spatial/#functions-distance)
 * @group Expressions
 * @category Cypher Functions
 * @example Generated Cypher: `point.distance(point1, point2)`
 */
function pointDistance(lexpr, rexpr) {
    return new CypherFunction("point.distance", [lexpr, rexpr]);
}
exports.pointDistance = pointDistance;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-labels)
 * @group Expressions
 * @category Cypher Functions
 */
function labels(nodeRef) {
    return new CypherFunction("labels", [nodeRef]);
}
exports.labels = labels;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-randomuuid)
 * @group Expressions
 * @category Cypher Functions
 */
function randomUUID() {
    return new CypherFunction("randomUUID");
}
exports.randomUUID = randomUUID;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-id)
 * @group Expressions
 * @category Cypher Functions
 */
function id(variable) {
    return new CypherFunction("id", [variable]);
}
exports.id = id;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-elementid)
 * @group Expressions
 * @category Cypher Functions
 */
function elementId(variable) {
    return new CypherFunction("elementId", [variable]);
}
exports.elementId = elementId;
//# sourceMappingURL=CypherFunctions.js.map