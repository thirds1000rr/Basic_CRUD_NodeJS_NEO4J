"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.collect = exports.sum = exports.avg = exports.max = exports.min = exports.count = exports.CypherAggregationFunction = void 0;
const CypherFunctions_1 = require("./CypherFunctions");
class CypherAggregationFunction extends CypherFunctions_1.CypherFunction {
    constructor(name, param) {
        super(name, [param]);
        this.hasDistinct = false;
    }
    /**
     * Adds DISTINCT to remove duplicates on the aggregation functions
     * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#_counting_with_and_without_duplicates)
     */
    distinct() {
        this.hasDistinct = true;
        return this;
    }
    /** @internal */
    getCypher(env) {
        const argsStr = this.serializeParams(env);
        const distinctStr = this.hasDistinct ? "DISTINCT " : "";
        return `${this.name}(${distinctStr}${argsStr})`;
    }
}
exports.CypherAggregationFunction = CypherAggregationFunction;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-count)
 * @group Expressions
 * @category Cypher Functions
 */
function count(expr) {
    return new CypherAggregationFunction("count", expr);
}
exports.count = count;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-min)
 * @group Expressions
 * @category Cypher Functions
 */
function min(expr) {
    return new CypherAggregationFunction("min", expr);
}
exports.min = min;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-max)
 * @group Expressions
 * @category Cypher Functions
 */
function max(expr) {
    return new CypherAggregationFunction("max", expr);
}
exports.max = max;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-avg)
 * @group Expressions
 * @category Cypher Functions
 */
function avg(expr) {
    return new CypherAggregationFunction("avg", expr);
}
exports.avg = avg;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-sum)
 * @group Expressions
 * @category Cypher Functions
 */
function sum(expr) {
    return new CypherAggregationFunction("sum", expr);
}
exports.sum = sum;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/aggregating/#functions-collect)
 * @group Expressions
 * @category Cypher Functions
 */
function collect(expr) {
    return new CypherAggregationFunction("collect", expr);
}
exports.collect = collect;
//# sourceMappingURL=AggregationFunctions.js.map