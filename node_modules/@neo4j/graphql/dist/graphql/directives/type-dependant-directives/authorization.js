"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStaticAuthorizationDefinitions = exports.createAuthorizationDefinitions = void 0;
const utils_1 = require("@graphql-tools/utils");
const graphql_1 = require("graphql");
const graphql_compose_1 = require("graphql-compose");
const get_obj_field_meta_1 = __importDefault(require("../../../schema/get-obj-field-meta"));
const get_where_fields_1 = __importDefault(require("../../../schema/get-where-fields"));
const AUTHORIZATION_VALIDATE_STAGE = new graphql_1.GraphQLEnumType({
    name: "AuthorizationValidateStage",
    values: { BEFORE: { value: "BEFORE" }, AFTER: { value: "AFTER" } },
});
const AUTHORIZATION_VALIDATE_OPERATION = new graphql_1.GraphQLEnumType({
    name: "AuthorizationValidateOperation",
    values: {
        CREATE: { value: "CREATE" },
        READ: { value: "READ" },
        UPDATE: { value: "UPDATE" },
        DELETE: { value: "DELETE" },
        CREATE_RELATIONSHIP: { value: "CREATE_RELATIONSHIP" },
        DELETE_RELATIONSHIP: { value: "DELETE_RELATIONSHIP" },
    },
});
function createAuthorizationWhere(typeDefinitionName, schema) {
    /**
     * Both inputWhere and JWTPayloadWhere can be undefined,
     * JWTPayload can be not defined by the User in the user document,
     * and unused interface will not generate the {typeDefinitionName}Where making the inputWhere undefined
     * */
    const inputWhere = schema.getType(`${typeDefinitionName}Where`);
    const authorizationWhere = new graphql_1.GraphQLInputObjectType({
        name: `${typeDefinitionName}AuthorizationWhere`,
        fields() {
            return {
                AND: {
                    type: new graphql_1.GraphQLList(authorizationWhere),
                },
                OR: {
                    type: new graphql_1.GraphQLList(authorizationWhere),
                },
                NOT: {
                    type: authorizationWhere,
                },
                ...(inputWhere
                    ? {
                        node: {
                            type: inputWhere,
                        },
                    }
                    : {}),
                jwtPayload: {
                    type: new graphql_1.GraphQLInputObjectType({ name: "JWTPayloadWhere", fields: {} }),
                },
            };
        },
    });
    return authorizationWhere;
}
function createAuthorizationFilterRule(typeDefinitionName, inputWhere) {
    return new graphql_1.GraphQLInputObjectType({
        name: `${typeDefinitionName}AuthorizationFilterRule`,
        fields() {
            return {
                operations: {
                    type: new graphql_1.GraphQLList(AUTHORIZATION_VALIDATE_OPERATION),
                    defaultValue: ["READ", "UPDATE", "DELETE", "CREATE_RELATIONSHIP", "DELETE_RELATIONSHIP"],
                },
                requireAuthentication: {
                    type: graphql_1.GraphQLBoolean,
                    defaultValue: true,
                },
                where: {
                    type: inputWhere,
                },
            };
        },
    });
}
function createAuthorizationValidateRule(typeDefinitionName, inputWhere) {
    return new graphql_1.GraphQLInputObjectType({
        name: `${typeDefinitionName}AuthorizationValidateRule`,
        fields() {
            return {
                operations: {
                    type: new graphql_1.GraphQLList(AUTHORIZATION_VALIDATE_OPERATION),
                    defaultValue: ["READ", "CREATE", "UPDATE", "DELETE", "CREATE_RELATIONSHIP", "DELETE_RELATIONSHIP"],
                },
                when: {
                    type: new graphql_1.GraphQLList(AUTHORIZATION_VALIDATE_STAGE),
                    defaultValue: ["BEFORE", "AFTER"],
                },
                requireAuthentication: {
                    type: graphql_1.GraphQLBoolean,
                    defaultValue: true,
                },
                where: {
                    type: inputWhere,
                },
            };
        },
    });
}
function createAuthorization(typeDefinitionName, filterRule, validateRule) {
    return new graphql_1.GraphQLDirective({
        name: `${typeDefinitionName}Authorization`,
        locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION, graphql_1.DirectiveLocation.INTERFACE],
        args: {
            filter: {
                description: "filter",
                type: new graphql_1.GraphQLList(filterRule),
            },
            validate: {
                description: "validate",
                type: new graphql_1.GraphQLList(validateRule),
            },
        },
    });
}
function createJWTPayloadWhere(JWTPayloadDefinition) {
    const fields = JWTPayloadDefinition
        ? (0, get_obj_field_meta_1.default)({
            obj: JWTPayloadDefinition,
            objects: [],
            interfaces: [],
            unions: [],
            scalars: [],
            enums: [],
            validateResolvers: false,
        })
        : {
            scalarFields: [],
            enumFields: [],
            primitiveFields: [],
            temporalFields: [],
            pointFields: [],
        };
    const inputFieldsType = (0, get_where_fields_1.default)({ typeName: "JWTPayload", fields });
    const composer = new graphql_compose_1.SchemaComposer();
    const inputTC = composer.createInputTC({
        name: "JWTPayloadWhere",
        fields: inputFieldsType,
    });
    return inputTC.getType();
}
function createAuthorizationDefinitions(typeDefinitionName, schema) {
    const authorizationWhere = createAuthorizationWhere(typeDefinitionName, schema);
    const authorizationFilterRule = createAuthorizationFilterRule(typeDefinitionName, authorizationWhere);
    const authorizationValidateRule = createAuthorizationValidateRule(typeDefinitionName, authorizationWhere);
    const authorization = createAuthorization(typeDefinitionName, authorizationFilterRule, authorizationValidateRule);
    const authorizationSchema = new graphql_1.GraphQLSchema({
        directives: [authorization],
        types: [authorizationWhere, authorizationFilterRule, authorizationValidateRule],
    });
    const authorizationWhereAST = (0, utils_1.astFromInputObjectType)(authorizationWhere, authorizationSchema);
    const authorizationFilterRuleAST = (0, utils_1.astFromInputObjectType)(authorizationFilterRule, authorizationSchema);
    const authorizationValidateRuleAST = (0, utils_1.astFromInputObjectType)(authorizationValidateRule, authorizationSchema);
    const authorizationAST = (0, utils_1.astFromDirective)(authorization);
    return [authorizationWhereAST, authorizationFilterRuleAST, authorizationValidateRuleAST, authorizationAST];
}
exports.createAuthorizationDefinitions = createAuthorizationDefinitions;
function getStaticAuthorizationDefinitions(JWTPayloadDefinition) {
    const schema = new graphql_1.GraphQLSchema({});
    const authorizationValidateStage = (0, utils_1.astFromEnumType)(AUTHORIZATION_VALIDATE_STAGE, schema);
    const authorizationValidateOperation = (0, utils_1.astFromEnumType)(AUTHORIZATION_VALIDATE_OPERATION, schema);
    const ASTs = [
        authorizationValidateStage,
        authorizationValidateOperation,
    ];
    const JWTPayloadWere = createJWTPayloadWhere(JWTPayloadDefinition);
    const JWTPayloadWereAST = (0, utils_1.astFromInputObjectType)(JWTPayloadWere, schema);
    ASTs.push(JWTPayloadWereAST);
    return ASTs;
}
exports.getStaticAuthorizationDefinitions = getStaticAuthorizationDefinitions;
//# sourceMappingURL=authorization.js.map