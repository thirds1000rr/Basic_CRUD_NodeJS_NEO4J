"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAuthField = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const map_to_db_property_1 = __importDefault(require("../../../utils/map-to-db-property"));
function createAuthField({ node, key, elementRef, param, }) {
    const dbFieldName = (0, map_to_db_property_1.default)(node, key);
    const fieldPropertyRef = elementRef.property(dbFieldName);
    if (param.value === undefined) {
        return new cypher_builder_1.default.Literal(false);
    }
    if (param.value === null) {
        return cypher_builder_1.default.isNull(fieldPropertyRef);
    }
    const isNotNull = cypher_builder_1.default.isNotNull(fieldPropertyRef);
    const equalsToParam = cypher_builder_1.default.eq(fieldPropertyRef, param);
    return cypher_builder_1.default.and(isNotNull, equalsToParam);
}
exports.createAuthField = createAuthField;
//# sourceMappingURL=create-auth-field.js.map