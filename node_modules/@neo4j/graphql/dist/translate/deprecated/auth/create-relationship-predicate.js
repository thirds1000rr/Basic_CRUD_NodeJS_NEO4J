"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRelationshipPredicate = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const get_relationship_direction_1 = require("../../../utils/get-relationship-direction");
function createRelationshipPredicate({ nodeRef, relationField, targetNodeRef, authPredicate, kind, context, }) {
    const relationship = new cypher_builder_1.default.Relationship({
        type: relationField.type,
    });
    const direction = (0, get_relationship_direction_1.getCypherRelationshipDirection)(relationField);
    const innerPattern = new cypher_builder_1.default.Pattern(nodeRef)
        .withoutLabels()
        .related(relationship)
        .withDirection(direction)
        .withoutVariable()
        .to(targetNodeRef);
    const existsPattern = new cypher_builder_1.default.Pattern(nodeRef)
        .withoutLabels()
        .related(relationship)
        .withDirection(direction)
        .withoutVariable()
        .to(targetNodeRef)
        .withoutVariable();
    let predicateFunction;
    if (kind === "allow") {
        predicateFunction = cypher_builder_1.default.any(targetNodeRef, new cypher_builder_1.default.PatternComprehension(innerPattern, targetNodeRef), authPredicate);
    }
    else {
        predicateFunction = cypher_builder_1.default[context.auth?.bindPredicate ?? context.plugins?.auth?.bindPredicate ?? "all"](targetNodeRef, new cypher_builder_1.default.PatternComprehension(innerPattern, targetNodeRef), authPredicate);
    }
    const existsFunction = cypher_builder_1.default.exists(existsPattern);
    return cypher_builder_1.default.and(existsFunction, predicateFunction);
}
exports.createRelationshipPredicate = createRelationshipPredicate;
//# sourceMappingURL=create-relationship-predicate.js.map