"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSubPredicate = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const join_predicates_1 = require("../../../utils/join-predicates");
const get_or_create_cypher_variable_1 = require("../../utils/get-or-create-cypher-variable");
const create_auth_predicate_1 = require("./create-auth-predicate");
const create_authenticated_predicate_1 = require("./create-authenticated-predicate");
const create_roles_predicate_1 = require("./create-roles-predicate");
function createSubPredicate({ authRule, skipRoles, skipIsAuthenticated, allow, context, bind, where, }) {
    const thisPredicates = [];
    const authParam = new cypher_builder_1.default.NamedParam("auth");
    if (!skipRoles && authRule.roles) {
        const rolesPredicate = (0, create_roles_predicate_1.createRolesPredicate)(authRule.roles, authParam.property("roles"));
        thisPredicates.push(rolesPredicate);
    }
    if (!skipIsAuthenticated && (authRule.isAuthenticated === true || authRule.isAuthenticated === false)) {
        const authenticatedPredicate = (0, create_authenticated_predicate_1.createAuthenticatedPredicate)(authRule.isAuthenticated, authParam.property("isAuthenticated"));
        thisPredicates.push(authenticatedPredicate);
    }
    if (allow && authRule.allow) {
        const nodeRef = (0, get_or_create_cypher_variable_1.getOrCreateCypherNode)(allow.varName);
        const allowAndParams = (0, create_auth_predicate_1.createAuthPredicate)({
            context,
            node: allow.node,
            nodeRef,
            rule: authRule,
            kind: "allow",
        });
        if (allowAndParams) {
            thisPredicates.push(allowAndParams);
        }
    }
    join_predicates_1.PREDICATE_JOINS.forEach((key) => {
        const value = authRule[key];
        if (!value) {
            return;
        }
        const predicates = [];
        value.forEach((v) => {
            const predicate = createSubPredicate({
                authRule: v,
                skipRoles,
                skipIsAuthenticated,
                allow,
                context,
                bind,
                where,
            });
            if (!predicate) {
                return;
            }
            predicates.push(predicate);
        });
        let joinedPredicate;
        if (key === "AND") {
            joinedPredicate = cypher_builder_1.default.and(...predicates);
        }
        else if (key === "OR") {
            joinedPredicate = cypher_builder_1.default.or(...predicates);
        }
        if (joinedPredicate) {
            thisPredicates.push(joinedPredicate);
        }
    });
    if (where && authRule.where) {
        const nodeRef = (0, get_or_create_cypher_variable_1.getOrCreateCypherNode)(where.varName);
        const wherePredicate = (0, create_auth_predicate_1.createAuthPredicate)({
            context,
            node: where.node,
            nodeRef,
            rule: authRule,
            kind: "where",
        });
        if (wherePredicate) {
            thisPredicates.push(wherePredicate);
        }
    }
    if (bind && authRule.bind) {
        const nodeRef = (0, get_or_create_cypher_variable_1.getOrCreateCypherNode)(bind.varName);
        const allowPredicate = (0, create_auth_predicate_1.createAuthPredicate)({
            context,
            node: bind.node,
            nodeRef,
            rule: authRule,
            kind: "bind",
        });
        if (allowPredicate) {
            thisPredicates.push(allowPredicate);
        }
    }
    return cypher_builder_1.default.and(...thisPredicates);
}
exports.createSubPredicate = createSubPredicate;
//# sourceMappingURL=create-sub-predicate.js.map