import type { ResolveTree } from "graphql-parse-resolve-info";
import type { Node } from "../../../classes";
import type { Context, CypherField, CypherFieldReferenceMap } from "../../../types";
import Cypher from "@neo4j/cypher-builder";
import type { ProjectionMeta } from "../../create-projection-and-params";
interface Res {
    projection: Cypher.Expr[];
    params: any;
    meta: ProjectionMeta;
    subqueries: Array<Cypher.Clause>;
    subqueriesBeforeSort: Array<Cypher.Clause>;
}
export declare function translateCypherDirectiveProjection({ context, cypherField, field, node, alias, nodeRef, res, cypherFieldAliasMap, }: {
    context: Context;
    cypherField: CypherField;
    field: ResolveTree;
    node: Node;
    nodeRef: Cypher.Node;
    alias: string;
    res: Res;
    cypherFieldAliasMap: CypherFieldReferenceMap;
}): Res;
export {};
//# sourceMappingURL=translate-cypher-directive-projection.d.ts.map