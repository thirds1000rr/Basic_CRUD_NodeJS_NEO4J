"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAuthAndParams = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const create_auth_predicates_1 = require("./create-auth-predicates");
function createAuthAndParams({ entity, operations, skipRoles, skipIsAuthenticated, allow, context, bind, where, }) {
    const authPredicate = (0, create_auth_predicates_1.createAuthPredicates)({
        entity,
        operations,
        skipRoles,
        skipIsAuthenticated,
        allow,
        context,
        bind,
        where,
    });
    if (!authPredicate) {
        return {
            cypher: "",
            params: {},
        };
    }
    const authPredicateExpr = new cypher_builder_1.default.RawCypher((env) => {
        return authPredicate.getCypher(env);
    });
    const chainStr = generateUniqueChainStr([where?.varName, allow?.varName, bind?.varName]);
    // Params must be globally unique, variables can be just slightly different, as each auth statement is scoped
    const authCypher = authPredicateExpr.build({ params: `${chainStr}auth_`, variables: `auth_` });
    return { cypher: authCypher.cypher, params: authCypher.params };
}
exports.createAuthAndParams = createAuthAndParams;
function generateUniqueChainStr(varNames) {
    return varNames
        .map((v) => {
        return typeof v === "string" ? v : "";
    })
        .join("");
}
//# sourceMappingURL=create-auth-and-params.js.map