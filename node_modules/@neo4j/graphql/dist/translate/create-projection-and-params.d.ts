import type { ResolveTree } from "graphql-parse-resolve-info";
import Cypher from "@neo4j/cypher-builder";
import type { Node } from "../classes";
import type { Context, CypherFieldReferenceMap } from "../types";
export interface ProjectionMeta {
    authValidatePredicates?: Cypher.Predicate[];
}
export type ProjectionResult = {
    params: Record<string, any>;
    meta: ProjectionMeta;
    subqueriesBeforeSort: Array<Cypher.Clause>;
    subqueries: Array<Cypher.Clause>;
    projection: Cypher.Expr;
};
export default function createProjectionAndParams({ resolveTree, node, context, varName, literalElements, resolveType, cypherFieldAliasMap, }: {
    resolveTree: ResolveTree;
    node: Node;
    context: Context;
    varName: Cypher.Node;
    literalElements?: boolean;
    resolveType?: boolean;
    cypherFieldAliasMap: CypherFieldReferenceMap;
}): ProjectionResult;
//# sourceMappingURL=create-projection-and-params.d.ts.map