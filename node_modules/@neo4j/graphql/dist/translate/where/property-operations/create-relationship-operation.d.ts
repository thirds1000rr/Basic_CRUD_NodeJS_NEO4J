import type { Context, GraphQLWhereArg, RelationField, PredicateReturn } from "../../../types";
import Cypher from "@neo4j/cypher-builder";
import type { WhereOperator } from "../types";
import type { Node, Relationship } from "../../../classes";
export declare function createRelationshipOperation({ relationField, context, parentNode, operator, value, isNot, }: {
    relationField: RelationField;
    context: Context;
    parentNode: Cypher.Node;
    operator: string | undefined;
    value: GraphQLWhereArg;
    isNot: boolean;
}): PredicateReturn;
export declare function createRelationPredicate({ targetNode, targetPattern, targetRelationship, parentNode, refNode, context, relationField, whereInput, whereOperator, refEdge, }: {
    parentNode: Cypher.Node;
    targetNode: Cypher.Node;
    targetPattern: Cypher.Pattern;
    targetRelationship: Cypher.Relationship;
    refNode: Node;
    context: Context;
    relationField: RelationField;
    whereInput: GraphQLWhereArg;
    whereOperator: WhereOperator;
    refEdge?: Relationship;
}): PredicateReturn;
//# sourceMappingURL=create-relationship-operation.d.ts.map