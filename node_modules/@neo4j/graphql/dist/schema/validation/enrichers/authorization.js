"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorizationUsageEnricher = exports.authorizationDefinitionsEnricher = void 0;
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const graphql_1 = require("graphql");
const authorization_1 = require("../../../graphql/directives/type-dependant-directives/authorization");
function getAuthorizationDirectiveDefinition(typeDefinitionNode) {
    return typeDefinitionNode.directives?.find((directive) => directive.name.value === "authorization");
}
function containsAuthorization(object) {
    switch (object.kind) {
        case graphql_1.Kind.INTERFACE_TYPE_EXTENSION:
        case graphql_1.Kind.OBJECT_TYPE_EXTENSION:
        case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:
        case graphql_1.Kind.OBJECT_TYPE_DEFINITION: {
            return !!(getAuthorizationDirectiveDefinition(object) ||
                (!!object.fields && object.fields.some(getAuthorizationDirectiveDefinition)));
        }
        default:
            return false;
    }
}
function getAuthorizationUsage(currentDirectiveUsage, typeName) {
    return {
        ...currentDirectiveUsage,
        name: {
            kind: graphql_1.Kind.NAME,
            value: `${typeName}Authorization`,
        },
    };
}
function changeAuthorizationUsageOnField(field, userDocumentObject) {
    const userField = userDocumentObject.fields?.find((userDefinitionField) => field.name.value === userDefinitionField.name.value);
    const userFieldAuthorizationUsage = userField && getAuthorizationDirectiveDefinition(userField);
    if (!userFieldAuthorizationUsage) {
        return field;
    }
    const fieldAuthorizationUsage = getAuthorizationUsage(userFieldAuthorizationUsage, userDocumentObject.name.value);
    return { ...field, directives: (field.directives ?? []).concat(fieldAuthorizationUsage) };
}
function changeAuthorizationUsageOnObject(object, userDocumentObject) {
    const userAuthorizationUsage = getAuthorizationDirectiveDefinition(userDocumentObject);
    const fieldsWithNewAuthorizationUsage = object.fields?.map((field) => changeAuthorizationUsageOnField(field, userDocumentObject));
    const newDirectiveUsage = userAuthorizationUsage && getAuthorizationUsage(userAuthorizationUsage, object.name.value);
    return {
        ...object,
        directives: newDirectiveUsage ? (object.directives ?? []).concat(newDirectiveUsage) : object.directives,
        fields: fieldsWithNewAuthorizationUsage,
    };
}
function findAuthorizationUsageByTypeName(typeName, enricherContext) {
    const userDocumentObject = enricherContext.userDefinitionNodeMap[typeName];
    const userDocumentExtensions = enricherContext.userDefinitionNodeMap[`${userDocumentObject?.name.value}_EXTENSIONS`];
    if ((userDocumentObject && containsAuthorization(userDocumentObject)) ||
        (userDocumentExtensions && userDocumentExtensions.find(containsAuthorization))) {
        return true;
    }
    return false;
}
function authorizationDefinitionsEnricher(enricherContext) {
    return (accumulatedDefinitions, definition) => {
        switch (definition.kind) {
            case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:
            case graphql_1.Kind.OBJECT_TYPE_DEFINITION: {
                const typeName = definition.name.value;
                const hasAuthorization = findAuthorizationUsageByTypeName(typeName, enricherContext);
                if (hasAuthorization) {
                    const authDefinitions = (0, authorization_1.createAuthorizationDefinitions)(typeName, enricherContext.augmentedSchema);
                    accumulatedDefinitions.push(...authDefinitions);
                }
            }
        }
        accumulatedDefinitions.push(definition);
        return accumulatedDefinitions;
    };
}
exports.authorizationDefinitionsEnricher = authorizationDefinitionsEnricher;
function authorizationUsageEnricher(enricherContext) {
    return (accumulatedDefinitions, definition) => {
        switch (definition.kind) {
            case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:
            case graphql_1.Kind.OBJECT_TYPE_DEFINITION: {
                const typeName = definition.name.value;
                const userDocumentObject = enricherContext.userDefinitionNodeMap[typeName];
                const userDocumentExtensions = enricherContext.userDefinitionNodeMap[`${typeName}_EXTENSIONS`];
                if (userDocumentObject) {
                    let definitionWithEnrichedAuthorization = containsAuthorization(userDocumentObject)
                        ? changeAuthorizationUsageOnObject(definition, userDocumentObject)
                        : definition;
                    if (userDocumentExtensions) {
                        definitionWithEnrichedAuthorization = userDocumentExtensions.reduce((prev, curr) => {
                            return containsAuthorization(curr) ? changeAuthorizationUsageOnObject(prev, curr) : prev;
                        }, definitionWithEnrichedAuthorization);
                    }
                    accumulatedDefinitions.push(definitionWithEnrichedAuthorization);
                    return accumulatedDefinitions;
                }
            }
        }
        accumulatedDefinitions.push(definition);
        return accumulatedDefinitions;
    };
}
exports.authorizationUsageEnricher = authorizationUsageEnricher;
//# sourceMappingURL=authorization.js.map