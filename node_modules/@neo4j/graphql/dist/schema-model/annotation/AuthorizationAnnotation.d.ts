export declare const AuthorizationAnnotationArguments: readonly ["filter", "validate"];
export type AuthorizationFilterOperation = "READ" | "UPDATE" | "DELETE" | "CREATE_RELATIONSHIP" | "DELETE_RELATIONSHIP";
export type AuthorizationValidateOperation = "READ" | "CREATE" | "UPDATE" | "DELETE" | "CREATE_RELATIONSHIP" | "DELETE_RELATIONSHIP";
export type ValidateWhen = "BEFORE" | "AFTER";
export declare const AuthorizationFilterOperationRule: ReadonlyArray<AuthorizationFilterOperation>;
export declare const AuthorizationValidateOperationRule: ReadonlyArray<AuthorizationValidateOperation>;
export declare class AuthorizationAnnotation {
    filter?: AuthorizationFilterRule[];
    validate?: AuthorizationValidateRule[];
    constructor({ filter, validate }: {
        filter?: AuthorizationFilterRule[];
        validate?: AuthorizationValidateRule[];
    });
}
export type AuthorizationFilterRuleConstructor = {
    operations?: AuthorizationFilterOperation[];
    requireAuthentication?: boolean;
    where: AuthorizationWhere;
};
export declare class AuthorizationFilterRule {
    operations: AuthorizationFilterOperation[];
    requireAuthentication: boolean;
    where: AuthorizationWhere;
    constructor({ operations, requireAuthentication, where }: AuthorizationFilterRuleConstructor);
}
export type AuthorizationValidateRuleConstructor = {
    operations?: AuthorizationValidateOperation[];
    requireAuthentication?: boolean;
    where: AuthorizationWhere;
    when?: ValidateWhen[];
};
export declare class AuthorizationValidateRule {
    operations: AuthorizationValidateOperation[];
    requireAuthentication: boolean;
    where: AuthorizationWhere;
    when: ValidateWhen[];
    constructor({ operations, requireAuthentication, where, when }: AuthorizationValidateRuleConstructor);
}
export declare class AuthorizationWhere {
    jwtPayload?: Record<string, any>;
    node?: Record<string, any>;
    constructor(where: {
        jwtPayload?: Record<string, any>;
        node?: Record<string, any>;
    });
}
//# sourceMappingURL=AuthorizationAnnotation.d.ts.map