import type { Attribute } from "../attribute/Attribute";
import type { ConcreteEntity } from "../entity/ConcreteEntity";
import type { Entity } from "../entity/Entity";
export type RelationshipDirection = "IN" | "OUT";
export declare class Relationship {
    readonly name: string;
    readonly type: string;
    readonly attributes: Map<string, Attribute>;
    readonly source: ConcreteEntity;
    readonly target: Entity;
    readonly direction: RelationshipDirection;
    /**Note: Required for now to infer the types without ResolveTree */
    get connectionFieldTypename(): string;
    /**Note: Required for now to infer the types without ResolveTree */
    get relationshipFieldTypename(): string;
    constructor({ name, type, attributes, source, target, direction, }: {
        name: string;
        type: string;
        attributes?: Attribute[];
        source: ConcreteEntity;
        target: Entity;
        direction: RelationshipDirection;
    });
    clone(): Relationship;
    private addAttribute;
    findAttribute(name: string): Attribute | undefined;
}
//# sourceMappingURL=Relationship.d.ts.map